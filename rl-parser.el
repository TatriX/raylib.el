;;; This file is used to generate elisp code from raylib.h

(require 'treesit)
(require 'cl-lib)
(require 'seq)

(cl-assert (treesit-available-p))
(cl-assert (treesit-language-available-p 'c))


(defvar rl--header-path "./raylib/src/raylib.h")

(defvar rl--parser-buffer (find-file-noselect rl--header-path))
(defvar rl--parser (treesit-parser-create 'c rl--parser-buffer))

(defun rl--generate ()
  (let ((filename "rl-const.el")
        (result (treesit-query-capture rl--parser
                                       '((type_definition
                                          type: (enum_specifier
                                                 body: (enumerator_list)  @enum)
                                          declarator: ((type_identifier) @keyboard-key
                                                       (:match "KeyboardKey" @keyboard-key))))))
        keys)
    ;; collect enum values
    (dolist (node (treesit-node-children (map-elt result 'enum)))
      (when (equal (treesit-node-type node) "enumerator")
        (push (cons (treesit-node-get node '((child 0 nil) (text t)))
                    (treesit-node-get node '((child 2 nil) (text t))))
              keys)))
    ;; generate file
    (with-current-buffer (get-buffer-create filename)
      (erase-buffer)
      (emacs-lisp-mode)
      (insert ";; DO NOT EDIT!\n")
      (insert ";; This file is autogenerated by rl-parser.el\n")
      (insert "\n")
      (pcase-dolist (`(,key . ,value) keys)
        (prin1 `(defconst
                  ,(intern (format "rl-%s" (string-replace "_" "-" (downcase key))))
                  ,(string-to-number value))
               (current-buffer))
        (insert "\n"))
      (write-file filename))))


(rl--generate)

(treesit-parser-delete rl--parser)


